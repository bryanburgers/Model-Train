<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <script type="text/javascript" xlink:href="utility.js" />
 <script type="text/javascript" xlink:href="endpoint.js" />
 <script type="text/javascript" xlink:href="part.js" />
 <script type="text/javascript" xlink:href="track.js" />
 <script type="text/javascript" xlink:href="train.js" />
 <script type="text/javascript" xlink:href="traverser.js" />
 <script type="text/javascript" xlink:href="session.js" />
 <script type="text/javascript"><![CDATA[
  var speed = 1;
  var traverser = null;
  var trainSvg = null;
  var i = 128;
  var boxSettings = {
    rotate: 0,
    translateX: 300,
    translateY: 300,
    scale: 0.44444,
    toTransformString: function() {
      return "translate(" + this.translateX + "," + this.translateY + ") scale(" + this.scale + ") rotate(" + this.rotate + ")";
    },
    update: function() {
      document.getElementById("box").setAttribute("transform", this.toTransformString());
    }
  };
  
  function speedChanged(event) {
    var p = document.documentElement.createSVGPoint();
    p.x = event.x;
    p.y = event.y;

    var p2 = p.matrixTransform(this.getCTM().inverse());

    var y = 100 - p2.y;
    if (y < 7.5) { y = 0; }
      
    var speedSVG = document.getElementById("speed");
    speedSVG.setAttribute("y", (100 - y).toString());
    speedSVG.setAttribute("height", y.toString());
    speed = y / 25;
  }

  var control = {
    isMouseDown: false,
    element: null,
    addEventListeners: function(element) {
      var t = this;
      element.addEventListener("mousedown", function(event) { t.mousedown(this, event); }, false);
      window.addEventListener("mouseup", function(event) { t.mouseup(event); }, false);
      window.addEventListener("mousemove", function(event) { t.mousemove(event); }, false);
    },
    mousedown: function(element, event) {
      this.isMouseDown = true;
      this.element = element;
      this.update(element, event);
    },
    mouseup: function(event) {
      if (this.isMouseDown) {
        this.isMouseDown = false;
        this.update(this.element, event);
      }
    },
    mousemove: function(event) {
      if (this.isMouseDown) {
        this.update(this.element, event);
      }
    },
    createControl: function(subject) {
      for (var p in this) {
        if (p == 'createControl') { continue; }
        if (p == 'isMouseDown') { continue; }
        if (p == 'element') { continue; }
        subject[p] = this[p];
      }
      return subject;
    }
  };

  var speedControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var y = 100 - p2.y;
      if (y < 7.5) { y = 0; }

      y = Math.min(100, Math.max(0, y));
      
      var speedSVG = document.getElementById("speed");
      speedSVG.setAttribute("y", (100 - y).toString());
      speedSVG.setAttribute("height", y.toString());
      speed = y / 25;
    }
  });

  var rotationControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var angleR = Math.atan2(p2.y - 50, p2.x);

      var newX = 40 * Math.cos(angleR);
      var newY = 40 * Math.sin(angleR) + 50;

      var angleD = (angleR * 180 / Math.PI) + 90;
      boxSettings.rotate = angleD;

      var rotationSVG = document.getElementById("rotation");
      rotationSVG.setAttribute("cx", newX.toString());
      rotationSVG.setAttribute("cy", newY.toString());

      boxSettings.update();
    }
  });


  var zoomControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var y = 100 - p2.y;
      y = Math.min(100, Math.max(0, y));
      
      var zoomSVG = document.getElementById("zoom");
      zoomSVG.setAttribute("y", (100 - y).toString());
      zoomSVG.setAttribute("height", y.toString());
      boxSettings.scale = y / 100;

      boxSettings.update();
    }
  });

  addEventListener("load", function(event) {
   speedControl.addEventListeners(document.getElementById("speedControl"));
   rotationControl.addEventListeners(document.getElementById("rotationControl"));
   zoomControl.addEventListeners(document.getElementById("zoomControl"));

   var s = {x:Part.straight248};
   var c90 = {x:Part.r90};
   var rc90 = {x:Part.r90,e:"2"};
   var c45 = {x:Part.c45_249};
   var rc45 = {x:Part.c45_249,e:"2"};

   pieces = Track.createTrack(Utility.createResult(0, 0, 0), 
     [ s
     , c45
     , c45
     , c45
     , c45
     , c45
     , c45
     , s
     , s
     , rc45
     , rc45
     , rc45
     , rc45
     , rc45
     , rc45
     , s
     ]);
   pieces = Track.createTrack(Utility.createResult(0,0,0),
     [ s
     , c45
     , c45
     , c45
     , c45
     , s
     , s
     , c45
     , c45
     , c45
     , c45
     , s
     ]);
   var parent = document.getElementById("tracks");
   for (var i = 0; i < pieces.length; i++) {
    Track.drawTrackPiece(document, parent, pieces[i]);
   }

   var train = Train.createTrain("#train");   
   {
     var trackPiece = pieces[0];
     var endpoint = trackPiece.endpoints[0];
     traverser = trackPiece.traverserFromEndpoint(endpoint);
   }
   
   var initialResult = traverser.evaluate(i);
   trainSVG = Train.createTrainSVG(document, document.getElementById("trains"), train, initialResult);
   setInterval(moveTrain, 10);
  }, false);

  function moveTrain() {
   if (speed < 0.1) return;

   var result = traverser.evaluate(i);
   Train.updateTrain(trainSVG, result);

   i += speed;
   var oldLength = traverser.length;
   if (i > traverser.length) {
     z = Train.findClosestTrackPiece(pieces, result, traverser.trackPiece);
     traverser = z.trackPiece.traverserFromEndpoint(z.endpoint);
   }
   while (i > oldLength) { i -= oldLength; }
  }
 ]]></script>
 <defs>
  <rect id="wood" x="-9" y="-1" width="18" height="2" stroke="none" fill="#b51"/>
  <g id="straight248">
   <line x1="0" y1="124" x2="0" y2="-124" stroke-width="18" stroke="#b51" stroke-dasharray="2,8" stroke-dashoffset="4" />
   <line x1="-4.5" y1="124" x2="-4.5" y2="-124" stroke-width="1" stroke="black" />
   <line  x1="4.5" y1="124"  x2="4.5" y2="-124" stroke-width="1" stroke="black" />
  </g>
  <g id="curve45_249">
   <path d="M -249,0 A 249,249,0,0,1,-176.07,-176.07" stroke-width="18" stroke="#b51" stroke-dasharray="2,8" stroke-dashoffset="4" fill="none" />
   <path d="M -253.5,0 A 253.5,253.5,0,0,1,-179.25,-179.25" stroke-width="1" stroke="black" fill="none" />
   <path d="M -244.5,0 A 244.5,244.5,0,0,1,-172.89,-172.89" stroke-width="1" stroke="black" fill="none" />
  </g>
  <g id="r90">
   <path d="M -4.5,124 A 132.5,132.5,0,0,1,124,-4.5" stroke-width="2" stroke="black" fill="none" />
   <path d="M  4.5,124 A 123.5,123.5,0,0,1,124, 4.5" stroke-width="2" stroke="black" fill="none" />
  </g>

  <linearGradient
 id="windshieldGradient" x1="-8" y1="-16" x2="8" y2="-11" gradientUnits="userSpaceOnUse">

   <stop
 stop-color="#004f86" offset="0" />

   <stop stop-color="#000000" offset="1" />

  </linearGradient>

  <linearGradient
 id="trainGradient" x1="-10"
 x2="10"
 gradientUnits="userSpaceOnUse">

   <stop stop-color="#f60000" offset="0" />

   <stop stop-color="#d20000" offset="0.5" />

   <stop stop-color="#f60000" offset="1" />

  </linearGradient>

  <g id="train">
   <path

     d="M -10,15 C -10,18 -8,20 -5,20 L 5,20 C 8,20 10,18 10,15 L 10,-10 C 10,-30 -10,-30 -10,-10 L -10,15 z"

     fill="url(#trainGradient)"
     stroke="none"/>
   <path

     d="M -8,-11 C -7,-10 7,-10 8,-11 C 8,-27 -8,-27 -8,-11 z"
     fill="url(#windshieldGradient)"
     stroke="none"/>
  </g>
 </defs>

 <!-- The grass (background) -->
 <rect width="100%" height="100%" fill="#080"/>

 <!-- Where all of the scene elements go -->
 <g id="box" transform="translate(300,300) scale(0.444444) rotate(0)">
   <g id="tracks"/>
   <g id="trains"/>
 </g>

 <!-- Speed -->
 <g id="speedControl" transform="translate(5,5)">
   <rect x="0" y="0" width="20" height="100" fill="#fff"/>
   <rect id="speed" x="0" y="75" width="20" height="25" fill="#88f"/>
   <rect x="0" y="0" width="20" height="100" stroke="#008" fill="none"/>
 </g>

 <!-- Rotation -->
 <g id="rotationControl" transform="translate(55,105)">
   <path d="M 0,0 A 50,50,0,1,0,0.001,0 M 0,20 A 30,30,0,1,0,0.001,20" fill="white" stroke="#008" fill-rule="evenodd"/>
   <ellipse id="rotation" rx="10" ry="10" cx="0" cy="10" fill="#88f" stroke="#008"/>
   <path d="M 0,0 A 50,50,0,1,0,0.001,0 M 0,20 A 30,30,0,1,0,0.001,20" fill="none" stroke="#008" fill-rule="evenodd"/>
 </g>

 <!-- Zoom -->
 <g id="zoomControl" transform="translate(5,205)">
   <rect x="0" y="0" width="20" height="100" fill="#fff"/>
   <rect id="zoom" x="0" y="56" width="20" height="44" fill="#88f"/>
   <rect x="0" y="0" width="20" height="100" stroke="#008" fill="none"/>
 </g>
</svg>