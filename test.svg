<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <trackdata xmlns="tag:bryan.burgers@gmail.com,2010-08-25:train-track"><![CDATA[{"name":"Oval","pieces":[{"x":0,"y":-124,"rotation":0,"pieceID":"straight248"},{"x":249,"y":-248,"rotation":0,"pieceID":"curve45-249"},{"x":249.00000762939453,"y":-247.99998474121094,"rotation":45,"pieceID":"curve45-249"},{"x":249.0000152587891,"y":-247.99996948242188,"rotation":90,"pieceID":"curve45-249"},{"x":248.99998474121094,"y":-247.9999542236328,"rotation":135,"pieceID":"curve45-249"},{"x":498,"y":-123.99995422363281,"rotation":180,"pieceID":"straight248"},{"x":498,"y":124.00004577636719,"rotation":180,"pieceID":"straight248"},{"x":249,"y":248.00004577636722,"rotation":180,"pieceID":"curve45-249"},{"x":248.99998474121094,"y":248.0000457763672,"rotation":225,"pieceID":"curve45-249"},{"x":248.99998474121088,"y":248.00003051757812,"rotation":270,"pieceID":"curve45-249"},{"x":248.99999237060547,"y":248.00001525878906,"rotation":315,"pieceID":"curve45-249"},{"x":-0.000004252209722284108,"y":124.00001525878906,"rotation":360,"pieceID":"straight248"}]}]]></trackdata>
 <trackdata xmlns="tag:bryan.burgers@gmail.com,2010-08-25:train-track"><![CDATA[{"name":"Other","pieces":[{"x":0,"y":-124,"rotation":0,"pieceID":"straight248"},{"x":249,"y":-248,"rotation":0,"pieceID":"curve45-249"},{"x":249.00000762939453,"y":-247.99998474121094,"rotation":45,"pieceID":"curve45-249"},{"x":249.0000152587891,"y":-247.99996948242188,"rotation":90,"pieceID":"curve45-249"},{"x":248.99998474121094,"y":-247.9999542236328,"rotation":135,"pieceID":"curve45-249"},{"x":747.0000152587891,"y":-247.99995422363278,"rotation":315,"pieceID":"curve45-249"},{"x":747.0000152587891,"y":-247.99996185302734,"rotation":630,"pieceID":"curve45-249"},{"x":747.0000000000006,"y":250.00003051757812,"rotation":810,"pieceID":"curve45-249"},{"x":746.9999847412109,"y":250.0000457763672,"rotation":855,"pieceID":"curve45-249"},{"x":996.0000000000001,"y":374.0000457763672,"rotation":900,"pieceID":"straight248"},{"x":747,"y":498.0000610351564,"rotation":900,"pieceID":"curve45-249"},{"x":746.9999847412109,"y":498.0000457763672,"rotation":945,"pieceID":"curve45-249"},{"x":623,"y":747.0000610351561,"rotation":990,"pieceID":"straight248"},{"x":375,"y":747.0000610351561,"rotation":990,"pieceID":"straight248"},{"x":251.00000000000028,"y":498.00006103515625,"rotation":990,"pieceID":"curve45-249"},{"x":251.00001525878906,"y":498.0000457763672,"rotation":1035,"pieceID":"curve45-249"},{"x":2.000000238418488,"y":374.0000305175781,"rotation":1080,"pieceID":"straight248"},{"x":2.000000238418488,"y":126.00003051757812,"rotation":1080,"pieceID":"straight248"}]}]]></trackdata>
 <script type="text/javascript" xlink:href="timing.js" />
 <script type="text/javascript" xlink:href="utility.js" />
 <script type="text/javascript" xlink:href="endpoint.js" />
 <script type="text/javascript" xlink:href="part.js" />
 <script type="text/javascript" xlink:href="track.js" />
 <script type="text/javascript" xlink:href="train.js" />
 <script type="text/javascript" xlink:href="traverser.js" />
 <script type="text/javascript" xlink:href="session.js" />
 <script type="text/javascript"><![CDATA[
  var fps = Timing.createFPSMonitor();
  fps.addEventListener("fpschange", function(event) {
    var fpsD = document.getElementById("fps");
    fpsD.textContent = event.fps.toString();
  }, false);

  var speed = 1;
  var traverser = null;
  var trainSvg = null;
  var i = 128;
  var boxSettings = {
    rotate: 0,
    translateX: 300,
    translateY: 300,
    scale: 0.44444,
    toTransformString: function() {
      return "translate(" + this.translateX + "," + this.translateY + ") scale(" + this.scale + ") rotate(" + this.rotate + ")";
    },
    update: function() {
      document.getElementById("box").setAttribute("transform", this.toTransformString());
    }
  };
  
  function speedChanged(event) {
    var p = document.documentElement.createSVGPoint();
    p.x = event.x;
    p.y = event.y;

    var p2 = p.matrixTransform(this.getCTM().inverse());

    var y = 100 - p2.y;
    if (y < 7.5) { y = 0; }
      
    var speedSVG = document.getElementById("speed");
    speedSVG.setAttribute("y", (100 - y).toString());
    speedSVG.setAttribute("height", y.toString());
    speed = y / 25;
  }

  var control = {
    isMouseDown: false,
    element: null,
    addEventListeners: function(element) {
      var t = this;
      element.addEventListener("mousedown", function(event) { t.mousedown(this, event); }, false);
      window.addEventListener("mouseup", function(event) { t.mouseup(event); }, false);
      window.addEventListener("mousemove", function(event) { t.mousemove(event); }, false);
    },
    mousedown: function(element, event) {
      this.isMouseDown = true;
      this.element = element;
      this.update(element, event);
    },
    mouseup: function(event) {
      if (this.isMouseDown) {
        this.isMouseDown = false;
        this.update(this.element, event);
      }
    },
    mousemove: function(event) {
      if (this.isMouseDown) {
        this.update(this.element, event);
      }
    },
    createControl: function(subject) {
      for (var p in this) {
        if (p == 'createControl') { continue; }
        if (p == 'isMouseDown') { continue; }
        if (p == 'element') { continue; }
        subject[p] = this[p];
      }
      return subject;
    }
  };

  var speedControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var y = 100 - p2.y;
      if (y < 7.5) { y = 0; }

      y = Math.min(100, Math.max(0, y));
      
      var speedSVG = document.getElementById("speed");
      speedSVG.setAttribute("y", (100 - y).toString());
      speedSVG.setAttribute("height", y.toString());
      speed = y / 25;
    }
  });

  var rotationControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var angleR = Math.atan2(p2.y - 50, p2.x);

      var newX = 40 * Math.cos(angleR);
      var newY = 40 * Math.sin(angleR) + 50;

      var angleD = (angleR * 180 / Math.PI) + 90;
      boxSettings.rotate = angleD;

      var rotationSVG = document.getElementById("rotation");
      rotationSVG.setAttribute("cx", newX.toString());
      rotationSVG.setAttribute("cy", newY.toString());

      boxSettings.update();
    }
  });


  var zoomControl = control.createControl({
    update: function(element, event) {
      var p = document.documentElement.createSVGPoint();
      p.x = event.layerX;
      p.y = event.layerY;

      var p2 = p.matrixTransform(element.getCTM().inverse());

      var y = 100 - p2.y;
      y = Math.min(100, Math.max(0, y));
      
      var zoomSVG = document.getElementById("zoom");
      zoomSVG.setAttribute("y", (100 - y).toString());
      zoomSVG.setAttribute("height", y.toString());
      boxSettings.scale = y / 100;

      boxSettings.update();
    }
  });

  var layouts = {};
  function loadLayouts() {
    var yoffset = 0;
    var yheight = 21;
    var ymargin = 2;
    var elements = document.getElementsByTagNameNS("tag:bryan.burgers@gmail.com,2010-08-25:train-track", "trackdata");
    var layoutsSVG = document.getElementById("layouts");
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      var jsonStr = element.childNodes[0].nodeValue;
      var json = JSON.parse(jsonStr);
      layouts[json.name] = json;
      var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("x", "0");
      rect.setAttribute("y", yoffset.toString());
      rect.setAttribute("width", "75");
      rect.setAttribute("height", yheight.toString());
      rect.setAttribute("fill", "blue");
      rect.setAttribute("stroke", "black");
      addClickEventListener(rect, json.name);
      layoutsSVG.appendChild(rect);
      yoffset += yheight + ymargin;
    }    
  }

  function addClickEventListener(rect, name) {
    rect.addEventListener("click", function() { changeLayout(name); }, false);
  }

  function changeLayout(name) {
    var layout = layouts[name];
    if (!layout) { return; }

    var parent = document.getElementById("tracks");
    while (parent.childNodes.length) {
      parent.removeChild(parent.childNodes[0]);
    }
    var trainsParent = document.getElementById("trains");
    while (trainsParent.childNodes.length) {
      trainsParent.removeChild(trainsParent.childNodes[0]);
    }

    pieces = Track.loadTrack(layout);

    for (var i = 0; i < pieces.length; i++) {
      Track.drawTrackPiece(document, parent, pieces[i]);
    }

    var train = Train.createTrain("#train");   
    {
      var trackPiece = pieces[0];
      var endpoint = trackPiece.endpoints[0];
      traverser = trackPiece.traverserFromEndpoint(endpoint);
    }
   
    var initialResult = traverser.evaluate(i);
    trainSVG = Train.createTrainSVG(document, document.getElementById("trains"), train, initialResult);
  }

  addEventListener("load", function(event) {
   speedControl.addEventListeners(document.getElementById("speedControl"));
   rotationControl.addEventListeners(document.getElementById("rotationControl"));
   zoomControl.addEventListeners(document.getElementById("zoomControl"));
   document.addEventListener("click", function(event) { console.log(JSON.stringify(Session.trackPiecesToJson(pieces))); }, false);
   loadLayouts();


   var s = {x:Part.straight248};
   var c45 = {x:Part.curve45_249};
   var rc45 = {x:Part.c45_249,e:"2"};

   pieces = Track.createTrack(Utility.createResult(0,0,0),
     [ s
     , c45
     , c45
     , c45
     , c45
     , s
     , s
     , c45
     , c45
     , c45
     , c45
     , s
     ]);
   var parent = document.getElementById("tracks");
   for (var i = 0; i < pieces.length; i++) {
    Track.drawTrackPiece(document, parent, pieces[i]);
   }

   var train = Train.createTrain("#train");   
   {
     var trackPiece = pieces[0];
     var endpoint = trackPiece.endpoints[0];
     traverser = trackPiece.traverserFromEndpoint(endpoint);
   }
   
   var initialResult = traverser.evaluate(i);
   trainSVG = Train.createTrainSVG(document, document.getElementById("trains"), train, initialResult);
   setInterval(moveTrain, 10);
  }, false);

  function moveTrain() {
   if (speed < 0.1) return;

   var result = traverser.evaluate(i);
   Train.updateTrain(trainSVG, result);

   i += speed;
   var oldLength = traverser.length;
   if (i > traverser.length) {
     z = Train.findClosestTrackPiece(pieces, result, traverser.trackPiece);
     traverser = z.trackPiece.traverserFromEndpoint(z.endpoint);
   }
   while (i > oldLength) { i -= oldLength; }
   fps.frameRendered();
  }
 ]]></script>
 <defs>
  <g id="straight248">
   <line x1="0" y1="124" x2="0" y2="-124" stroke-width="18" stroke="#b51" stroke-dasharray="2,8" stroke-dashoffset="4" />
   <line x1="-4.5" y1="124" x2="-4.5" y2="-124" stroke-width="1" stroke="black" />
   <line  x1="4.5" y1="124"  x2="4.5" y2="-124" stroke-width="1" stroke="black" />
  </g>
  <g id="curve45_249">
   <path d="M -249,0 A 249,249,0,0,1,-176.07,-176.07" stroke-width="18" stroke="#b51" stroke-dasharray="2,8" stroke-dashoffset="4" fill="none" />
   <path d="M -253.5,0 A 253.5,253.5,0,0,1,-179.25,-179.25" stroke-width="1" stroke="black" fill="none" />
   <path d="M -244.5,0 A 244.5,244.5,0,0,1,-172.89,-172.89" stroke-width="1" stroke="black" fill="none" />
  </g>

  <linearGradient
 id="windshieldGradient" x1="-8" y1="-16" x2="8" y2="-11" gradientUnits="userSpaceOnUse">

   <stop
 stop-color="#004f86" offset="0" />

   <stop stop-color="#000000" offset="1" />

  </linearGradient>

  <linearGradient
 id="trainGradient" x1="-10"
 x2="10"
 gradientUnits="userSpaceOnUse">

   <stop stop-color="#f60000" offset="0" />

   <stop stop-color="#d20000" offset="0.5" />

   <stop stop-color="#f60000" offset="1" />

  </linearGradient>

  <g id="train">
   <path

     d="M -10,15 C -10,18 -8,20 -5,20 L 5,20 C 8,20 10,18 10,15 L 10,-10 C 10,-30 -10,-30 -10,-10 L -10,15 z"

     fill="url(#trainGradient)"
     stroke="none"/>
   <path

     d="M -8,-11 C -7,-10 7,-10 8,-11 C 8,-27 -8,-27 -8,-11 z"
     fill="url(#windshieldGradient)"
     stroke="none"/>
  </g>
 </defs>

 <!-- The grass (background) -->
 <rect width="100%" height="100%" fill="#080"/>

 <!-- Where all of the scene elements go -->
 <g id="box" transform="translate(300,300) scale(0.444444) rotate(0)">
   <g id="tracks"/>
   <g id="trains"/>
 </g>

 <g id="layouts" transform="translate(105, 5)">
 </g>

 <!-- Speed -->
 <g id="speedControl" transform="translate(5,5)">
   <rect x="0" y="0" width="20" height="100" fill="#fff"/>
   <rect id="speed" x="0" y="75" width="20" height="25" fill="#88f"/>
   <rect x="0" y="0" width="20" height="100" stroke="#008" fill="none"/>
 </g>

 <!-- Rotation -->
 <g id="rotationControl" transform="translate(55,105)">
   <path d="M 0,0 A 50,50,0,1,0,0.001,0 M 0,20 A 30,30,0,1,0,0.001,20" fill="white" stroke="#008" fill-rule="evenodd"/>
   <ellipse id="rotation" rx="10" ry="10" cx="0" cy="10" fill="#88f" stroke="#008"/>
   <path d="M 0,0 A 50,50,0,1,0,0.001,0 M 0,20 A 30,30,0,1,0,0.001,20" fill="none" stroke="#008" fill-rule="evenodd"/>
 </g>

 <!-- Zoom -->
 <g id="zoomControl" transform="translate(5,205)">
   <rect x="0" y="0" width="20" height="100" fill="#fff"/>
   <rect id="zoom" x="0" y="56" width="20" height="44" fill="#88f"/>
   <rect x="0" y="0" width="20" height="100" stroke="#008" fill="none"/>
 </g>

 <g transform="translate(205, 5)">
   <text id="fps" x="0" y="10"></text>
 </g>
</svg>